// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindLedger.Infrastructure.Persistence;

#nullable disable

namespace MindLedger.Infrastructure.Migrations
{
    [DbContext(typeof(MindLedgerDbContext))]
    [Migration("20250622155447_AddCampaignIdToNoteBase")]
    partial class AddCampaignIdToNoteBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("MindLedger.Domain.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("MindLedger.Domain.NoteBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");

                    b.HasDiscriminator<string>("NoteType").HasValue("NoteBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MindLedger.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("NoteBaseTag", b =>
                {
                    b.Property<Guid>("NotesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("TEXT");

                    b.HasKey("NotesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("NoteBaseTag");
                });

            modelBuilder.Entity("MindLedger.Domain.Charakter", b =>
                {
                    b.HasBaseType("MindLedger.Domain.NoteBase");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("Character");
                });

            modelBuilder.Entity("MindLedger.Domain.Location", b =>
                {
                    b.HasBaseType("MindLedger.Domain.NoteBase");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("MindLedger.Domain.Npc", b =>
                {
                    b.HasBaseType("MindLedger.Domain.NoteBase");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("Npc");
                });

            modelBuilder.Entity("MindLedger.Domain.Session", b =>
                {
                    b.HasBaseType("MindLedger.Domain.NoteBase");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("Session");
                });

            modelBuilder.Entity("MindLedger.Domain.WorldNote", b =>
                {
                    b.HasBaseType("MindLedger.Domain.NoteBase");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("WorldNote");
                });

            modelBuilder.Entity("NoteBaseTag", b =>
                {
                    b.HasOne("MindLedger.Domain.NoteBase", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindLedger.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MindLedger.Domain.Charakter", b =>
                {
                    b.HasOne("MindLedger.Domain.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("MindLedger.Domain.Location", b =>
                {
                    b.HasOne("MindLedger.Domain.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("MindLedger.Domain.Npc", b =>
                {
                    b.HasOne("MindLedger.Domain.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("MindLedger.Domain.Session", b =>
                {
                    b.HasOne("MindLedger.Domain.Campaign", "Campaign")
                        .WithMany("Sessions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("MindLedger.Domain.WorldNote", b =>
                {
                    b.HasOne("MindLedger.Domain.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("MindLedger.Domain.Campaign", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
